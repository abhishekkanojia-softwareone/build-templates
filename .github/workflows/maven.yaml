name: Reusable Maven Build and Push to ECR

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      ecr-repository:
        required: true
        type: string
      dockerfile-path:
        required: false
        type: string
        default: './Dockerfile'
      context-path:
        required: false
        type: string
        default: '.'
      java-version:
        required: false
        type: string
        default: '17'
      aws-role-arn:
        required: true
        type: string
    #secrets:
    #  PERSONAL_ACCESS_TOKEN:
    #    required: true  

jobs:
  build-and-push:
    name: Build Maven and Push to ECR
    runs-on:
      group: adp-runner  # Use your self-hosted runner group
      labels: [self-hosted, linux]  # Add specific labels if needed

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Up JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.java-version }}
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          maven-${{ runner.os }}-

    - name: Build with Maven
      run: mvn package -DskipTests

    - name: Configure AWS Credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-session-name: github-actions
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Tag Docker Image
      run: |
        IMAGE_TAG=$(date +%Y%m%d%H%M%S)-${{ secrets.environment }}
        docker build -t ${{ inputs.ecr-repository }}:${IMAGE_TAG} -f ${{ inputs.dockerfile-path }} ${{ inputs.context-path }}
        docker tag ${{ inputs.ecr-repository }}:${IMAGE_TAG} ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository }}:${IMAGE_TAG}
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Push Docker Image to ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository }}:${IMAGE_TAG}

    - name: Output Image URL
      run: |
        echo "Image URL: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository }}:${IMAGE_TAG}"
